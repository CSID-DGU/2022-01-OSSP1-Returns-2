"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = __importDefault(require("webpack"));
const creator_1 = require("./creator");
const CssMinimizerPlugin = require('css-minimizer-webpack-plugin');
class Build extends creator_1.WebpackCreator {
    constructor(opts) {
        super(opts);
    }
    config() {
        // const { esbuild } = this.opts;
        const conf = {
            optimization: {
                minimize: true,
                minimizer: ['...', new CssMinimizerPlugin()],
            },
            plugins: [
                new webpack_1.default.optimize.SplitChunksPlugin({
                    chunks: 'all',
                    minSize: 30000,
                    maxSize: 600000,
                    minChunks: 1,
                    automaticNameDelimiter: '_',
                    cacheGroups: {
                        baseCommon: {
                            test: new RegExp(`[\\/]node_modules[\\/](${[
                                'react',
                                'react-router',
                                'react-dom',
                                'react-redux',
                                'redux',
                                'react-router-redux',
                            ].join('|')})`),
                            priority: 1,
                        },
                        antd: {
                            name: 'antd',
                            test: /[\\/]node_modules[\\/]antd[\\/]/,
                            chunks: 'initial',
                        },
                        lodash: {
                            name: 'lodash',
                            test: /[\\/]node_modules[\\/]lodash[\\/]/,
                            chunks: 'initial',
                            priority: -10,
                        },
                        default: {
                            minChunks: 2,
                            priority: -20,
                            reuseExistingChunk: true,
                        },
                    },
                }),
            ],
        };
        return this.mergeConfig([this.baseConfig, conf]);
    }
    action() {
        //TODO: redefine stats
        (0, webpack_1.default)(this.config(), (error, stats) => {
            if (stats && stats.hasErrors()) {
                throw stats.toString({
                    logging: 'warn',
                    colors: true,
                });
            }
            if (error) {
                throw error;
            }
            this.successStdout('ko build completed!');
        });
    }
}
exports.default = Build;
