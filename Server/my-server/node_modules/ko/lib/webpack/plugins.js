"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const webpack_1 = require("webpack");
const case_sensitive_paths_webpack_plugin_1 = __importDefault(require("case-sensitive-paths-webpack-plugin"));
const mini_css_extract_plugin_1 = __importDefault(require("mini-css-extract-plugin"));
const react_refresh_webpack_plugin_1 = __importDefault(require("@pmmmwh/react-refresh-webpack-plugin"));
const webpackbar_1 = __importDefault(require("webpackbar"));
const config_1 = __importDefault(require("../utils/config"));
function getPlugins() {
    const { userConf } = config_1.default;
    let plugins = [
        new webpack_1.IgnorePlugin({
            resourceRegExp: /^\.\/locale$/,
            contextRegExp: /moment$/,
        }),
        //TODO: check if mini-css-extract-plugin should use base name if enable HMR
        new mini_css_extract_plugin_1.default({
            filename: 'css/[name].[contenthash].css',
            chunkFilename: 'css/[id].[contenthash].css',
        }),
        new case_sensitive_paths_webpack_plugin_1.default(),
        new react_refresh_webpack_plugin_1.default(),
        new webpackbar_1.default(),
    ];
    plugins = plugins.concat(userConf.plugins || []);
    if (config_1.default.isProductionEnv) {
        const { CleanWebpackPlugin } = require('clean-webpack-plugin');
        const prodPlugins = [
            new CleanWebpackPlugin({
                verbose: false,
                dry: false,
            }),
        ];
        plugins.concat(prodPlugins);
    }
    return plugins;
}
exports.default = getPlugins;
