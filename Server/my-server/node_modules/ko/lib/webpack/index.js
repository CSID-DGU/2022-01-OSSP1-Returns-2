"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const tsconfig_paths_webpack_plugin_1 = __importDefault(require("tsconfig-paths-webpack-plugin"));
const config_1 = __importDefault(require("../utils/config"));
const loaders_1 = __importDefault(require("./loaders"));
const plugins_1 = __importDefault(require("./plugins"));
const extensions = [
    '.js',
    '.jsx',
    '.ts',
    '.tsx',
    '.css',
    '.scss',
    '.sass',
    '.less',
    '.json',
    '.html',
];
function getWebpackBaseConf(opts) {
    const { ts = true, hash } = opts;
    const webpackBaseConf = {
        mode: config_1.default.isProductionEnv ? 'production' : 'development',
        target: 'web',
        context: config_1.default.cwd,
        entry: `src/index.${ts ? 'tsx' : 'js'}`,
        output: {
            path: config_1.default.defaultPaths.dist,
            filename: hash ? '[name].[contenthash].js' : '[name].js',
            publicPath: '/',
        },
        module: {
            rules: loaders_1.default,
        },
        plugins: (0, plugins_1.default)(),
        resolve: {
            extensions,
            plugins: [
                ts &&
                    new tsconfig_paths_webpack_plugin_1.default({
                        configFile: config_1.default.defaultPaths.tsconfig,
                    }),
            ].filter(Boolean),
            fallback: {
                fs: false,
                path: false,
                events: false,
                os: require.resolve('os-browserify/browser'),
                crypto: require.resolve('crypto-browserify'),
                stream: require.resolve('stream-browserify'),
                buffer: require.resolve('buffer/'),
                string_decoder: require.resolve('string_decoder/'),
            },
        },
        performance: {
            hints: false,
        },
        cache: {
            type: config_1.default.isProductionEnv ? 'filesystem' : 'memory',
        },
        stats: {
            cachedModules: false,
        },
    };
    return webpackBaseConf;
}
exports.default = getWebpackBaseConf;
